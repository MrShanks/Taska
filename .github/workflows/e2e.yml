name: E2E Tests

on: [push]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Verify database connection
        run: |
          psql -h 127.0.0.1 -U test -d testdb -c "SELECT 'Database is ready!'"
        env:
          PGPASSWORD: test

      - name: Install goose
        run: go install github.com/pressly/goose/v3/cmd/goose@latest

      - name: Run migrations
        run: |
          export GOOSE_DRIVER=postgres
          export GOOSE_DBSTRING=postgres://test:test@127.0.0.1:5432/testdb
          export GOOSE_MIGRATION_DIR=./taskmgr/goose
          goose up

      - name: Load test data into PostgreSQL
        run: |
          psql -h 127.0.0.1 -U test -d testdb -f e2e/setup.sql
        env:
          PGPASSWORD: test

      - name: Check Data
        run: |
          psql -h 127.0.0.1 -U test -d testdb -c "SELECT * FROM task;"
          psql -h 127.0.0.1 -U test -d testdb -c "SELECT * FROM author;"
        env:
          PGPASSWORD: test

      - name: Start taskmgr server
        run: |
          cd taskmgr && go run . &
          sleep 1
        env:
          POSTGRES_PWD: test
          USER: test
          DATABASE: testdb
          HOST: 127.0.0.1

      - name: Test Login 
        run: |
          OUTPUT=$(go run -C taskcli/ . login -e 'simone@staffoli.com' -p 'Mastro')
    
          if [ "$OUTPUT" = "Login successful!" ]; then
            echo "Test: login passed"
          else
            echo "Test: login failed!" >&2
            echo "Output: $OUTPUT is not what is expected"
            exit 1  # Fail the GitHub Action
          fi

      - name: Test Get 
        run: |
          OUTPUT=$(go run -C taskcli/ . get)
    
          if [ $( echo "$OUTPUT" | jq | grep 11111111 | wc -l) = 2]; then
            echo "Test: Get passed"
          else
            echo "Test: Get failed!" >&2
            echo "Output: $OUTPUT is not what is expected"
            exit 1  # Fail the GitHub Action
          fi

      - name: Stop Go server
        run: pkill -f "go run ." || true  # Stop server after tests
